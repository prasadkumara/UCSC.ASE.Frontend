[{"C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\redux\\store.js":"1","C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\components\\core\\loadingScreen\\LoadingScreen.js":"2","C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\containers\\DefaultLayout\\DefaultBreadcrumb.js":"3","C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\components\\core\\collapsible\\Collapsible.js":"4","C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\index.js":"5","C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\components\\core\\errorSpan\\ErrorSpan.js":"6","C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\containers\\DefaultLayout\\DefaultLayout.js":"7","C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\containers\\DefaultLayout\\DefaultHeader.js":"8","C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\routes.js":"9","C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\components\\pages\\students\\Students.js":"10","C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\components\\pages\\home\\HomePage.js":"11","C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\utility\\environmentConfig.js":"12","C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\reportWebVitals.js":"13","C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\components\\pages\\students\\StudentReservations.js":"14","C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\components\\pages\\campaign\\PromoCampaigns.js":"15","C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\App.js":"16","C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\components\\core\\index.js":"17"},{"size":566,"mtime":1682607670110,"results":"18","hashOfConfig":"19"},{"size":414,"mtime":1606277111566,"results":"20","hashOfConfig":"19"},{"size":1999,"mtime":1606277111562,"results":"21","hashOfConfig":"19"},{"size":1325,"mtime":1606289999238,"results":"22","hashOfConfig":"19"},{"size":583,"mtime":1607314096394,"results":"23","hashOfConfig":"19"},{"size":358,"mtime":1607175247569,"results":"24","hashOfConfig":"19"},{"size":2892,"mtime":1683275950334,"results":"25","hashOfConfig":"19"},{"size":6323,"mtime":1683276232098,"results":"26","hashOfConfig":"19"},{"size":860,"mtime":1683446687920,"results":"27","hashOfConfig":"19"},{"size":20774,"mtime":1683354455130,"results":"28","hashOfConfig":"19"},{"size":407,"mtime":1683276889737,"results":"29","hashOfConfig":"19"},{"size":350,"mtime":1682607665449,"results":"30","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"31","hashOfConfig":"19"},{"size":24101,"mtime":1683354974074,"results":"32","hashOfConfig":"19"},{"size":17936,"mtime":1683451695874,"results":"33","hashOfConfig":"19"},{"size":805,"mtime":1682607619834,"results":"34","hashOfConfig":"19"},{"size":218,"mtime":1607175502706,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1guj6i7",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\redux\\store.js",["77","78"],"C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\components\\core\\loadingScreen\\LoadingScreen.js",[],["79","80"],"C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\containers\\DefaultLayout\\DefaultBreadcrumb.js",["81","82"],"import React, { Component } from 'react';\r\nimport routes from \"../../routes\";\r\nimport { Link } from 'react-router-dom';\r\nimport './Style.scss';\r\n\r\nclass DefaultBreadcrumb extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.resetBreadcrumb = this.resetBreadcrumb.bind(this);\r\n\r\n        this.state = {\r\n            currentPath: \"\"\r\n        }\r\n    };\r\n\r\n    resetBreadcrumb() {\r\n        this.props.resetBreadcrumb();\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (window.location.pathname.split('/')[window.location.pathname.split('/').length - 1] !== \"home\") {\r\n            routes.forEach(route => {\r\n                if (window.location.pathname.split('/')[window.location.pathname.split('/').length - 1] == route.path.split('/')[route.path.split('/').length - 1]) {\r\n                    this.setState({\r\n                        currentPath: route.name\r\n                    }, () => {\r\n                        document.getElementById(\"default-breadcrumb-arrow_id\").style.display = \"block\";\r\n                    });\r\n                }\r\n            })\r\n        } else {\r\n            document.getElementById(\"default-breadcrumb-arrow_id\").style.display = \"none\";\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"default-breadcrumb_id\" className=\"default-breadcrumb\">\r\n                <Link to=\"/home\" onClick={this.resetBreadcrumb.bind(this)}>\r\n                    <div className=\"default-breadcrumb-home\">\r\n                        <i className=\"fas fa-home default-breadcrumb-home-icon\" />\r\n                    </div>\r\n                </Link>\r\n                <div id=\"default-breadcrumb-arrow_id\" style={{ float: \"left\" }}>\r\n                    <i className=\"fas fa-caret-right default-breadcrumb-arrow\" />\r\n                </div>\r\n                <div className=\"default-breadcrumb-item\">\r\n                    <a>{this.state.currentPath}</a>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default DefaultBreadcrumb","C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\components\\core\\collapsible\\Collapsible.js",["83","84"],"import React, { Component } from 'react';\r\nimport './Style.scss';\r\n\r\nexport default class Collapsible extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isCollapsed: false,\r\n            classname: \"collapsible-close\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.isCollapsed)\r\n            if (this.props.isCollapsed == true)\r\n                this.toggle();\r\n            else\r\n                this.setState({ classname: \"collapsible-open\" })\r\n        else\r\n            this.setState({ classname: \"collapsible-open\" })\r\n    };\r\n\r\n    toggle() {\r\n        var element = document.getElementById(this.props.id)\r\n        if (element !== null) {\r\n            this.setState({ isCollapsed: !this.state.isCollapsed })\r\n            if (this.state.isCollapsed) {\r\n                element.setAttribute(\"style\", \"display:''\");\r\n                this.setState({ classname: \"collapsible-open\" })\r\n            } else {\r\n                element.setAttribute(\"style\", \"display:none\");\r\n                this.setState({ classname: \"collapsible-close\" })\r\n            }\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <a className={this.state.classname} onClick={this.toggle.bind(this)}><i className=\"fa fa-chevron-down\"></i></a>\r\n        )\r\n    }\r\n}","C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\index.js",[],"C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\components\\core\\errorSpan\\ErrorSpan.js",[],"C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\containers\\DefaultLayout\\DefaultLayout.js",[],"C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\containers\\DefaultLayout\\DefaultHeader.js",["85","86","87"],"import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport routes from \"../../routes\";\r\nimport DefaultBreadcrumb from './DefaultBreadcrumb';\r\nimport logo from '../../assets/img/logo.png';\r\nimport userImg from '../../assets/img/user.jpg';\r\nimport './Style.scss';\r\n\r\n/**-- Imports for redux --*/\r\nimport { connect } from 'react-redux';\r\nimport { showLoadingScreen, hideLoadingScreen } from '../../redux/actions/loadingScreenActions';\r\n\r\n// map the redux states to props\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        loadingScreenVisible: state.loadingScreen\r\n    }\r\n};\r\n\r\n// map the redux actions to props\r\nconst mapDispatchToProps = {\r\n    showLoadingScreen,\r\n    hideLoadingScreen\r\n};\r\n\r\nclass DefaultHeader extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.setBreadcrumb = this.setBreadcrumb.bind(this);\r\n        this.resetBreadcrumb = this.resetBreadcrumb.bind(this);\r\n        this.handleNavMenuOutsideClick = this.handleNavMenuOutsideClick.bind(this);\r\n\r\n        this.state = {\r\n            menuList: [],\r\n            isMenuLoaded: false,\r\n            navMenuVisible: false,\r\n            userPopupVisible: false,\r\n            currentRoutePath: \"\"\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.props.showLoadingScreen();\r\n        this.setState({\r\n            menuList: routes,\r\n            isMenuLoaded: true\r\n        }, () => {\r\n            this.toggleSideMenu();\r\n            this.props.hideLoadingScreen();\r\n        })\r\n    };\r\n\r\n    toggleSideMenu() {\r\n        if (!this.state.navMenuVisible) {\r\n            // attach/remove event handler\r\n            document.addEventListener('click', this.handleNavMenuOutsideClick, false);\r\n            let sideMenu = document.getElementById(\"default-sidebar_id\");\r\n            sideMenu.classList.replace('sidebar-menu-close', 'sidebar-menu-open');\r\n        } else {\r\n            document.removeEventListener('click', this.handleNavMenuOutsideClick, false);\r\n            let sideMenu = document.getElementById(\"default-sidebar_id\");\r\n            sideMenu.classList.replace('sidebar-menu-open', 'sidebar-menu-close');\r\n        }\r\n\r\n        this.setState(prevState => ({\r\n            navMenuVisible: !prevState.navMenuVisible,\r\n        }));\r\n    };\r\n\r\n    handleNavMenuOutsideClick(event) {\r\n        if (event !== null && event.target !== null && event.target.id !== null) {\r\n            if (event.target.id === \"main_menu_toggler_icon\") {\r\n                this.setState(prevState => ({\r\n                    navMenuVisible: !prevState.navMenuVisible,\r\n                }, () => { this.toggleSideMenu() }));\r\n            } else {\r\n                if (this.navMenuNode) {\r\n                    if (this.navMenuNode.contains(event.target)) {\r\n                        return;\r\n                    }\r\n                    this.setState({\r\n                        navMenuVisible: true\r\n                    }, () => { this.toggleSideMenu() });\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    setBreadcrumb(routePath) {\r\n        this.setState({\r\n            currentRoutePath: routePath\r\n        })\r\n    };\r\n\r\n    resetBreadcrumb() {\r\n        this.setState({\r\n            currentRoutePath: \"\"\r\n        })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <header className=\"default-app-header\">\r\n                    {/*-- Header logo & title container --*/}\r\n                    <div className=\"app-header-logo-container\">\r\n                        <a href={window.location.origin + \"/home\"}>\r\n                            {/* <img src={logo} className=\"app-header-logo\" alt=\"FIANP Logo\" /> */}\r\n                        </a>\r\n                        <div className=\"app-header-menu-toggler\" onClick={this.toggleSideMenu.bind(this)}>\r\n                            <i id=\"main_menu_toggler_icon\" className=\"fas fa-bars\"></i>\r\n                        </div>\r\n                    </div>\r\n                    {/*-- Header user popup container --*/}\r\n                    <div className=\"app-header-user-container\">\r\n                        <img src={userImg} className=\"app-header-user_image\" alt=\"User Image\" />\r\n                    </div>\r\n                    {/*-- Side main navigation menu --*/}\r\n                    <div id=\"default-sidebar_id\" className=\"default-sidebar sidebar-menu-open\" ref={node => { this.navMenuNode = node; }}>\r\n                        <div className=\"default-navbar\">\r\n                            {/* <nav className=\"nav-item\">\r\n                                <li><Link to=\"/home\" htmlFor=\"tm\" id=\"toggle-menu\" onClick={() => { this.setBreadcrumb(\"/home\") }}>\r\n                                    <i className=\"fa fa-home nav-icon\" /> Home</Link>\r\n                                </li>\r\n                            </nav> */}\r\n                            {this.state.isMenuLoaded && this.state.menuList ?\r\n                                this.state.menuList.map((menu, index) => (\r\n                                    <nav key={index} className=\"nav-item\">\r\n                                        <li\r\n                                            key={index}\r\n                                            className='nav-item-list'>\r\n                                            <Link\r\n                                                style={{ display: 'flex', alignItems: 'baseline' }}\r\n                                                key={index} to={menu.path} onClick={() => { this.setBreadcrumb(menu.path) }}>\r\n                                                <i className={menu.icon + \" nav-icon\"} />\r\n                                                <label className=\"nav-title\" style={{ marginLeft: 5, width: '100%' }} htmlFor={`menu_${index}`}> {menu.name} </label>\r\n                                            </Link>\r\n                                        </li>\r\n                                    </nav>\r\n                                ))\r\n                                : null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </header>\r\n                <DefaultBreadcrumb key={this.state.currentRoutePath} resetBreadcrumb={this.resetBreadcrumb} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DefaultHeader);",["88","89"],"C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\routes.js",[],"C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\components\\pages\\students\\Students.js",[],"C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\components\\pages\\home\\HomePage.js",["90"],"import React, { Component } from 'react';\r\nimport { Row } from 'reactstrap';\r\nimport homeImg from '../../../assets/img/home.jpg';\r\n\r\nclass HomePage extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <img src={homeImg} style={{ width: \"100%\" }} />\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HomePage;","C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\utility\\environmentConfig.js",["91"],"C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\reportWebVitals.js",[],"C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\components\\pages\\students\\StudentReservations.js",[],"C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\components\\pages\\campaign\\PromoCampaigns.js",["92","93"],"import React, { Component } from 'react';\r\nimport { Collapsible, ErrorSpan } from '../../core';\r\nimport { get, post, del } from \"../../../utility/apiClient\";\r\nimport { FormGroup, Row, Col, Card, CardHeader, CardBody, Button, Label, Input, InputArea } from 'reactstrap';\r\nimport '../students/Style.scss';\r\n\r\n/*-- Imports for redux --*/\r\nimport { connect } from 'react-redux';\r\nimport { showMessageBox, resetMessageBox } from '../../../redux/actions/messageBoxActions';\r\nimport { showLoadingScreen, hideLoadingScreen } from '../../../redux/actions/loadingScreenActions';\r\n\r\n/*-- Map the redux states to props --*/\r\nfunction mapStateToProps(state) {\r\n    return {}\r\n};\r\n\r\n/*-- Map the redux actions to props --*/\r\nconst mapDispatchToProps = {\r\n    showMessageBox,\r\n    resetMessageBox,\r\n    showLoadingScreen,\r\n    hideLoadingScreen\r\n};\r\n\r\nclass PromoCampaigns extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            campaignId: 0,\r\n            emailList: \"\",\r\n            emailListError: \"\",\r\n            promotionHeader: \"\",\r\n            promotionHeaderError: \"\",\r\n            promotionDescription: \"\",\r\n            promotionDescriptionError: \"\",\r\n            existingPromoCampaignList: []\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.loadExistingPromoCampaigns();\r\n    };\r\n\r\n    handleChangeEvent = (event) => {\r\n        debugger\r\n        if (event.target.value !== \"\") {\r\n            this.setState({\r\n                [event.target.name]: event.target.value\r\n            })\r\n        }\r\n\r\n        if (event.target.name === \"emailList\") { this.setState({ emailListError: \"\" }) }\r\n        if (event.target.name === \"promotionHeader\") { this.setState({ promotionHeaderError: \"\" }) }\r\n        if (event.target.name === \"promotionDescription\") { this.setState({ promotionDescriptionError: \"\" }) }\r\n    };\r\n\r\n    resetFormData(showConfirmation) {\r\n        if (showConfirmation) {\r\n            let messageBox = {\r\n                show: true,\r\n                title: \"Confirmation\",\r\n                className: \"warning\",\r\n                content: \"Are you sure you want to reset the form data.?\",\r\n                isConfirmation: true,\r\n                callBackFunction: (response) => {\r\n                    if (response) {\r\n                        this.setState({\r\n                            campaignId: 0,\r\n                            emailList: \"\",\r\n                            emailListError: \"\",\r\n                            promotionHeader: \"\",\r\n                            promotionHeaderError: \"\",\r\n                            promotionDescription: \"\",\r\n                            promotionDescriptionError: \"\"\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n            this.props.showMessageBox(messageBox);\r\n        } else {\r\n            this.setState({\r\n                campaignId: 0,\r\n                emailList: \"\",\r\n                emailListError: \"\",\r\n                promotionHeader: \"\",\r\n                promotionHeaderError: \"\",\r\n                promotionDescription: \"\",\r\n                promotionDescriptionError: \"\"\r\n            })\r\n        }\r\n    };\r\n\r\n    loadSelectedPrmoCampaignData(selectedPrmoCampaign) {\r\n        if (selectedPrmoCampaign) {\r\n            this.setState({\r\n                campaignId: selectedPrmoCampaign.id,\r\n                emailList: selectedPrmoCampaign.promoEmail,\r\n                promotionHeader: selectedPrmoCampaign.promotionHeader,\r\n                promotionDescription: selectedPrmoCampaign.promotionDescription\r\n            })\r\n        }\r\n    };\r\n\r\n    validateSaveData() {\r\n        let isValidate = true;\r\n        if (this.state.emailList === \"\" || this.state.emailList === null) {\r\n            isValidate = false;\r\n            this.setState({ emailListError: 'Promo email is required' });\r\n        }\r\n        if (this.state.promotionHeader === \"\" || this.state.promotionHeader === null) {\r\n            isValidate = false;\r\n            this.setState({ promotionHeaderError: 'Promo header is required' });\r\n        }\r\n        if (this.state.promotionDescription === \"\" || this.state.promotionDescription === null) {\r\n            isValidate = false;\r\n            this.setState({ promotionDescriptionError: 'Promo description is required' });\r\n        }\r\n        return isValidate;\r\n    };\r\n\r\n    loadExistingPromoCampaigns() {\r\n        this.props.showLoadingScreen();\r\n        get('apigateway-prod/promotion').then(response => {\r\n            this.props.hideLoadingScreen();\r\n            if (response.request.status === 200) {\r\n                if (response.data !== null) {\r\n                    this.setState({\r\n                        existingPromoCampaignList: response.data\r\n                    })\r\n                }\r\n            } else {\r\n                let messageBox = {\r\n                    show: true,\r\n                    title: \"Oops!\",\r\n                    className: \"error\",\r\n                    content: \"Get existing promo campaign details failed.\\nYou may be able to try again.\",\r\n                    isConfirmation: false,\r\n                    callBackFunction: null\r\n                }\r\n                this.props.showMessageBox(messageBox);\r\n                console.error(`Get existing promo campaign details failed. | ${response.data.errorMessage}`);\r\n            }\r\n        })\r\n    };\r\n\r\n    deleteFormData() {\r\n        if (this.state.campaignId !== 0) {\r\n            let messageBox = {\r\n                show: true,\r\n                title: \"Confirmation\",\r\n                className: \"error\",\r\n                content: \"Are you sure you want to delete this promo campaign detail.?\",\r\n                isConfirmation: true,\r\n                callBackFunction: (response) => {\r\n                    if (response) {\r\n                        this.props.showLoadingScreen();\r\n                        del(`apigateway-prod/delete-promotion/${this.state.campaignId}`).then(response => {\r\n                            this.props.hideLoadingScreen();\r\n                            if (response.request.status === 200) {\r\n                                let messageBox = {\r\n                                    show: true,\r\n                                    title: \"Success\",\r\n                                    className: \"success\",\r\n                                    content: \"Promo campaign detail successfully deleted\",\r\n                                    isConfirmation: false,\r\n                                    callBackFunction: () => {\r\n                                        this.resetFormData(false);\r\n                                        this.loadExistingPromoCampaigns();\r\n                                    }\r\n                                }\r\n                                this.props.showMessageBox(messageBox);\r\n                            } else {\r\n                                let messageBox = {\r\n                                    show: true,\r\n                                    title: \"Oops!\",\r\n                                    className: \"error\",\r\n                                    content: \"Delete promo campaign detail failed.\\nYou may be able to try again.\",\r\n                                    isConfirmation: false,\r\n                                    callBackFunction: null\r\n                                }\r\n                                this.props.showMessageBox(messageBox);\r\n                                console.error(`Delete promo campaign detail failed. | ${response.data.errorMessage}`);\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n            this.props.showMessageBox(messageBox);\r\n        } else {\r\n            let messageBox = {\r\n                show: true,\r\n                title: \"Warning\",\r\n                className: \"warning\",\r\n                content: \"Please select an existing promo campaign detail\",\r\n                isConfirmation: false,\r\n                callBackFunction: null\r\n            }\r\n            this.props.showMessageBox(messageBox);\r\n        }\r\n    };\r\n\r\n    saveFormData() {\r\n        if (this.validateSaveData()) {\r\n            let formData = {\r\n                EmailList: this.state.emailList,\r\n                PromotionHeader: this.state.promotionHeader,\r\n                PromotionDescription: this.state.promotionDescription\r\n            }\r\n            this.props.showLoadingScreen();\r\n            post(\"apigateway-prod/save-promotion\", formData).then(response => {\r\n                this.props.hideLoadingScreen();\r\n                if (response.request.status === 200) {\r\n                    let messageBox = {\r\n                        show: true,\r\n                        title: \"Success\",\r\n                        className: \"success\",\r\n                        content: \"Promo campaign detail successfully saved\",\r\n                        isConfirmation: false,\r\n                        callBackFunction: () => {\r\n                            this.resetFormData(false);\r\n                            this.loadExistingPromoCampaigns();\r\n                        }\r\n                    }\r\n                    this.props.showMessageBox(messageBox);\r\n                } else {\r\n                    let messageBox = {\r\n                        show: true,\r\n                        title: \"Oops!\",\r\n                        className: \"error\",\r\n                        content: \"Save promo campaign detail failed.\\nYou may be able to try again.\",\r\n                        isConfirmation: false,\r\n                        callBackFunction: null\r\n                    }\r\n                    this.props.showMessageBox(messageBox);\r\n                    console.error(`Save promo campaign detail failed. | ${response.data.errorMessage}`);\r\n                }\r\n            })\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col md=\"12\" sm=\"12\" xs=\"12\">\r\n                        <Card>\r\n                            <CardHeader>\r\n                                <i className=\"fa fa-cube\"></i> Campaign Details\r\n                                <Collapsible id=\"student_input_criteria_id\" />\r\n                            </CardHeader>\r\n                            <CardBody id=\"student_input_criteria_id\">\r\n                                <FormGroup row>\r\n                                    <Col md=\"6\" sm=\"12\" xs=\"12\">\r\n                                        <Row>\r\n                                            <Col md=\"12\" sm=\"12\" xs=\"12\">\r\n                                                <Label>Email List</Label>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <Col md=\"12\" sm=\"12\" xs=\"12\">\r\n                                                <Input id=\"emailList_id\" name=\"emailList\" type=\"textarea\" rows=\"2\" value={this.state.emailList} maxLength={500} minLength={0} autoComplete=\"off\"\r\n                                                    onChange={this.handleChangeEvent.bind(this)} />\r\n                                                <ErrorSpan IsVisible={true} ErrorName={this.state.emailListError} />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Col>\r\n                                    <Col md=\"6\" sm=\"12\" xs=\"12\">\r\n                                        <Row>\r\n                                            <Col md=\"12\" sm=\"12\" xs=\"12\">\r\n                                                <Label>Promotion Header</Label>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <Col md=\"12\" sm=\"12\" xs=\"12\">\r\n                                                <Input id=\"promotionHeader_id\" name=\"promotionHeader\" type=\"textarea\" rows=\"2\" value={this.state.promotionHeader} maxLength={500} minLength={0} autoComplete=\"off\"\r\n                                                    onChange={this.handleChangeEvent.bind(this)} />\r\n                                                <ErrorSpan IsVisible={true} ErrorName={this.state.promotionHeaderError} />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Col>\r\n                                </FormGroup>\r\n                                <FormGroup row>\r\n                                    <Col md=\"6\" sm=\"12\" xs=\"12\">\r\n                                        <Row>\r\n                                            <Col md=\"12\" sm=\"12\" xs=\"12\">\r\n                                                <Label>Promotion Description</Label>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <Col md=\"12\" sm=\"12\" xs=\"12\">\r\n                                                <Input id=\"promotionDescription_id\" name=\"promotionDescription\" type=\"textarea\" rows=\"5\" value={this.state.promotionDescription} maxLength={1000} minLength={0} autoComplete=\"off\"\r\n                                                    onChange={this.handleChangeEvent.bind(this)} />\r\n                                                <ErrorSpan IsVisible={true} ErrorName={this.state.promotionDescriptionError} />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Col>\r\n                                </FormGroup>\r\n                                <FormGroup row>\r\n                                    {/* <Col md=\"3\" sm=\"3\" xs=\"3\">\r\n                                    </Col> */}\r\n                                    <Col className=\"offset-3\" md=\"3\" sm=\"3\" xs=\"3\">\r\n                                        <Button block className=\"btn btn-success mr-2\" onClick={this.saveFormData.bind(this)}>Save</Button>\r\n                                    </Col>\r\n                                    <Col md=\"3\" sm=\"3\" xs=\"3\">\r\n                                        <Button block className=\"btn btn-danger\" onClick={this.deleteFormData.bind(this)}>Delete</Button>\r\n                                    </Col>\r\n                                    <Col md=\"3\" sm=\"3\" xs=\"3\">\r\n                                        <Button block className=\"btn btn-warning\" onClick={this.resetFormData.bind(this)}>Reset</Button>\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </CardBody>\r\n                        </Card>\r\n                        <Card>\r\n                            <CardHeader>\r\n                                <i className=\"fa fa-cube\"></i> Existing Campaign Details\r\n                                <Collapsible id=\"student_exist_student_details_id\" />\r\n                            </CardHeader>\r\n                            <CardBody id=\"student_exist_student_details_id\">\r\n                                <FormGroup row>\r\n                                    <Col md=\"12\" sm=\"12\" xs=\"12\">\r\n                                        <div style={{ overflowX: \"auto\" }}>\r\n                                            <table className=\"exist-student-table\">\r\n                                                <tbody>\r\n                                                    <tr style={{ color: \"white\", backgroundColor: \"#6c757d\" }}>\r\n                                                        <th>Campaign Id</th>\r\n                                                        <th>Promo Email</th>\r\n                                                        <th>Promotion Header</th>\r\n                                                        <th>Promo Status</th>\r\n                                                        <th>Promotion Description</th>\r\n                                                        <th>Create On</th>\r\n                                                    </tr>\r\n                                                    <React.Fragment>\r\n                                                        {\r\n                                                            this.state.existingPromoCampaignList.map((promocampaign, index) => (\r\n                                                                <tr key={index} onClick={this.loadSelectedPrmoCampaignData.bind(this, promocampaign)}>\r\n                                                                    <td>{promocampaign.id}</td>\r\n                                                                    <td>{promocampaign.promoEmail}</td>\r\n                                                                    <td>{promocampaign.promotionHeader}</td>\r\n                                                                    <td>{promocampaign.promoStatus == 2 ? 'Email Sent' : 'Email Faild'}</td>\r\n                                                                    <td>{promocampaign.promotionDescription}</td>\r\n                                                                    <td>{promocampaign.createOn}</td>\r\n                                                                </tr>\r\n                                                            ))\r\n                                                        }\r\n                                                    </React.Fragment>\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </div>\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PromoCampaigns)\r\n","C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\App.js",[],"C:\\JMSL Project\\MSC Project\\Git Project\\UCSC.ASE.Frontend\\src\\components\\core\\index.js",[],{"ruleId":"94","severity":1,"message":"95","line":1,"column":40,"nodeType":"96","messageId":"97","endLine":1,"endColumn":47},{"ruleId":"98","severity":1,"message":"99","line":17,"column":1,"nodeType":"100","endLine":17,"endColumn":42},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":23,"column":105,"nodeType":"107","messageId":"108","endLine":23,"endColumn":107},{"ruleId":"109","severity":1,"message":"110","line":48,"column":21,"nodeType":"111","endLine":48,"endColumn":24},{"ruleId":"105","severity":1,"message":"106","line":15,"column":40,"nodeType":"107","messageId":"108","endLine":15,"endColumn":42},{"ruleId":"109","severity":1,"message":"110","line":39,"column":13,"nodeType":"111","endLine":39,"endColumn":82},{"ruleId":"94","severity":1,"message":"112","line":5,"column":8,"nodeType":"96","messageId":"97","endLine":5,"endColumn":12},{"ruleId":"113","severity":1,"message":"114","line":75,"column":18,"nodeType":"115","messageId":"116","endLine":75,"endColumn":19},{"ruleId":"117","severity":1,"message":"118","line":116,"column":25,"nodeType":"111","endLine":116,"endColumn":97},{"ruleId":"101","replacedBy":"119"},{"ruleId":"103","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":11,"column":21,"nodeType":"111","endLine":11,"endColumn":68},{"ruleId":"123","severity":1,"message":"124","line":10,"column":5,"nodeType":"125","messageId":"126","endLine":11,"endColumn":15},{"ruleId":"94","severity":1,"message":"127","line":4,"column":81,"nodeType":"96","messageId":"97","endLine":4,"endColumn":90},{"ruleId":"105","severity":1,"message":"106","line":339,"column":100,"nodeType":"107","messageId":"108","endLine":339,"endColumn":102},"no-unused-vars","'compose' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-native-reassign",["128"],"no-negated-in-lhs",["129"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'logo' is defined but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.",["128"],["129"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","'InputArea' is defined but never used.","no-global-assign","no-unsafe-negation"]